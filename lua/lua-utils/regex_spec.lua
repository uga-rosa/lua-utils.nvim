local regex = require("lua-utils.regex")

describe("Unit test for regex.lua", function()
    describe("function", function()
        local pat = [[\V\s\zs\S\*\ze]]
        it("find", function()
            local start, end_, matched = regex.find("hello world!", pat)
            assert.equals(7, start)
            assert.equals(12, end_)
            assert.equals("world!", matched)
        end)
        it("match", function()
            local matched = regex.match("foo bar", pat)
            assert.equals("bar", matched)
        end)
        it("gmatch", function()
            local result = {}
            for m in regex.gmatch("foo bar baz", pat) do
                table.insert(result, m)
            end
            assert.same({ "bar", "baz" }, result)
        end)
        it("gsub", function()
            assert.equals("foo foo foo", regex.gsub("foo bar baz", pat, "foo", "g"))
        end)
        it("split", function()
            assert.same({ "foo", "bar", "baz" }, regex.split("foo bar  baz", [[\V\s\+]]))
        end)
    end)
    describe("method", function()
        local re = regex.re([[\V\s\zs\S\*\ze]])
        it("find", function()
            local start, end_, matched = re:find("hello world!")
            assert.equals(7, start)
            assert.equals(12, end_)
            assert.equals("world!", matched)
        end)
        it("match", function()
            local matched = re:match("foo bar")
            assert.equals("bar", matched)
        end)
        it("gmatch", function()
            local result = {}
            for m in re:gmatch("foo bar baz") do
                table.insert(result, m)
            end
            assert.same({ "bar", "baz" }, result)
        end)
        it("gsub", function()
            assert.equals("foo foo foo", re:gsub("foo bar baz", "foo", "g"))
        end)
        it("split", function()
            local re2 = regex.re([[\V\s\+]])
            assert.same({ "foo", "bar", "baz" }, re2:split("foo bar  baz"))
        end)
    end)
end)
