local Seq = require("lua-utils.seq")

local seq = Seq.new({ 1, 2, 3, 4, 5 })

local function large(x)
    return function(y)
        return y > x
    end
end

local function add(x)
    return function(y)
        return y + x
    end
end

describe("Unit test for seq.lua", function()
    describe("CLASS", function()
        it("unpack", function()
            assert.same({ 1, 2, 3, 4, 5 }, seq:unpack())
        end)
        it("len", function()
            assert.equals(5, seq:len())
        end)
        it("tostring/print", function()
            assert.equals("@[1, 2, 3, 4, 5]", tostring(seq))
        end)
    end)
    describe("BESIC OPERATION", function()
        it("newWith", function()
            local seq2 = Seq.newWith(3, 4)
            assert.same({ 4, 4, 4 }, seq2:unpack())
            assert.equals(3, seq2:len())
            assert.equals(Seq, getmetatable(seq2))
        end)
        it("get", function()
            assert.equals(2, seq:get(2))
        end)
        it("set", function()
            seq:set(2, 3)
            assert.equals(3, seq:get(2))
            seq:set(2, 2)
        end)
        it("add", function()
            seq:add(7, 6)
            seq:add(6, 6)
            seq:add(8)
            assert.same({ 1, 2, 3, 4, 5, 6, 7, 8 }, seq:unpack())
        end)
        it("delete", function()
            seq:delete(6, 7)
            seq:delete(6)
            assert.same({ 1, 2, 3, 4, 5 }, seq:unpack())
        end)
        it("insert", function()
            seq:insert({ 7, 8 })
            assert.same({ 1, 2, 3, 4, 5, 7, 8 }, seq:unpack())
            seq:insert({ 6 }, 6)
            assert.same({ 1, 2, 3, 4, 5, 6, 7, 8 }, seq:unpack())
        end)
        it("slice", function()
            assert.same({ 3, 4, 5, 6 }, seq:slice(3, 6):unpack())
            assert.same({ 4 }, seq:slice(4):unpack())
        end)
        it("pop", function()
            assert.equals(8, seq:pop())
            assert.equals(6, seq:pop(6))
            assert.equals(7, seq:pop(6))
            assert.same({ 1, 2, 3, 4, 5 }, seq:unpack())
        end)
    end)
    describe("UTILITIES", function()
        it("all", function()
            assert.equals(true, seq:all(large(0)))
            assert.equals(false, seq:all(large(1)))
        end)
        it("any", function()
            assert.equals(true, seq:any(large(4)))
            assert.equals(false, seq:any(large(5)))
        end)
        it("count", function()
            assert.equals(1, seq:count(2))
        end)
        it("deduplicate", function()
            local seq2 = Seq.new({ 1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 5 }):deduplicate()
            assert.same({ 1, 2, 3, 4, 5 }, seq2:unpack())
        end)
        it("filter", function()
            assert.same({ 3, 4, 5 }, seq:filter(large(2)):unpack())
        end)
        it("keepIf", function()
            local seq2 = Seq.new({ 1, 2, 3, 4, 5 })
            assert.same({ 1, 2, 3, 4, 5 }, seq2:unpack())
            seq2:keepIf(large(3))
            assert.same({ 4, 5 }, seq2:unpack())
        end)
        it("map", function()
            assert.same({ 4, 5, 6, 7, 8 }, seq:map(add(3)):unpack())
        end)
        it("apply", function()
            local seq2 = Seq.new({ 1, 2, 3, 4, 5 })
            seq2:apply(add(3))
            assert.same({ 4, 5, 6, 7, 8 }, seq2:unpack())
        end)
        it("reversed", function()
            assert.same({ 5, 4, 3, 2, 1 }, seq:reversed():unpack())
            assert.same({ 1, 2, 3, 4, 5 }, seq:unpack())
        end)
        it("reverse", function()
            local seq2 = Seq.new({ 1, 2, 3, 4, 5 })
            seq2:reverse()
            assert.same({ 5, 4, 3, 2, 1 }, seq2:unpack())
        end)
        it("reverse_iter", function()
            local c = 11
            for v in Seq.reverse_iter({ 6, 7, 8, 9, 10 }) do
                c = c - 1
                assert.equals(c, v)
            end
        end)
    end)
end)
